<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.security">Security</Crumb::Item>
	<Crumb::Item @link="docs.security.authentication">Authentication</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Authentication</h2>
    <p>There are multiple forms of authentication built into SurrealDB, supporting different use cases:</p>
	<ul>
		<li><Link @link="#system-users"><strong>System users:</strong></Link> Created by the SurrealDB administrator and used for managing and consuming the database</li>
		<li><Link @link="#scope-users"><strong>Scope users:</strong></Link> Used for consuming the database, and they allow custom signup, signin and permissions logic</li>
	</ul>
</Layout::Text>

<Layout::Line />

<Layout::Text text-l text-f {{waypoint "system-users"}}>
	<h2>System users</h2>
	<p><strong>System users</strong> is the term we use to describe users defined directly on SurrealDB by the administrator. Same concept as any other database.</p>
	<p>
		Users may belong to different levels (root, namespace or database) and have different roles assigned to limit what they can do to the system.
		Users are defined with the <Link @link="docs.surrealql.statements.define.user">DEFINE USER</Link> statement.
	</p>

	<p>
		SurrealDB implements RBAC (Role Based Access Control) to define what a user can do. Each user is assigned one or more roles (currently limited to the built-in <code>OWNER</code>, <code>EDITOR</code> and <code>VIEWER</code> roles).
	</p>
	<p>Go to <Link @link="docs.surrealql.statements.define.user">DEFINE USER</Link> for more information</p>

	<Layout::gap tiny />

	<h3>Example: Define a Root-level user</h3>
	<p>Root-level users have visibility into all namespaces and databases, which means that their permissions apply to all of those levels.</p>
	<p>In this example we will create a root-level user <code>john</code> with a password and the <code>OWNER</code> role:</p>

	<Code @name="docs/security/system-users/root-define.surql" text="Define user" />

	<Layout::gap tiny />

	<h4>Sign in using the new user</h4>
	<p>Examples using the JavaScript SDK or a raw HTTP request.</p>

	<h5>JavaScript SDK</h5>
	<Code @name="docs/security/system-users/root-signin.js" />

	<h5>HTTP Request</h5>
	<Code @name="docs/security/system-users/root-signin.bash" />

	<Layout::gap tiny />

	<h3>Example: Define a Database-level user</h3>
	<p>Database-level users have visibility into all resources that belong to the database where the user is defined.</p>
	<p>In this example we will create a database-level user <code>mary</code> with a password and the <code>EDITOR</code> role:</p>

	<Code @name="docs/security/system-users/database-define.surql" text="Define user" />

	<Layout::gap tiny />

	<h4>Sign in using the new user</h4>
	<p>Examples using the JavaScript SDK or a raw HTTP request.</p>
	<p>Notice how we need to pass along <code>NS</code> and <code>DB</code> properties here, to let SurrealDB know where the user is defined.</p>

	<h5>JavaScript SDK</h5>
	<Code @name="docs/security/system-users/database-signin.js" />

	<h5>HTTP Request</h5>
	<Code @name="docs/security/system-users/database-signin.bash" />
</Layout::Text>

<Layout::Gap tiny />
<Layout::Line />

<Layout::Text text-l text-f {{waypoint "scope-users"}}>
    <h2>Scope users</h2>
	<p><strong>Scope</strong> is the term we use to describe the mechanism SurrealDB offers to define your own signin and signup logic. This feature contributes to making SurrealDB an all-in-one BaaS (Backend-as-a-Service).</p>
	<p>
		Scopes are defined with the <Link @link="docs.surrealql.statements.define.scope">DEFINE SCOPE</Link> statement. A scope is configured with the following config:
	</p>
	<ul>
		<li><code>SIGNUP</code>: Defines the logic for when a user signs up to the scope. It usually creates a new entry to a table</li>
		<li><code>SIGNIN</code>: Defines the logic for when a user signs in to the scope. It usually check the provided credentials against the data in a table</li>
		<li><code>SESSION</code>: Defines the session duration</li>
	</ul>
	<p>By default, scopes have no permissions. They don't use the RBAC system and can only view data if allowed by a <code>PERMISSIONS</code> clause, which is defined on every data resource (i.e. tables)</p>

	<p>Go to <Link @link="docs.surrealql.statements.define.scope">DEFINE SCOPE</Link> for more information</p>

	<Layout::gap tiny />

	<h3>Example: Setup scope authentication</h3>
	<p>We will go over one of the many ways you can set up scope authentication. Given you can define your own logic, there is not a single way to do it. Feel free to modify where needed!</p>

	<h4>Define the User table and fields</h4>
	<p>Typically, you would define a user table where new records are created every time a user signs up.</p>
	<p>In the following code snippet we will define the <code>user</code> table and a few <code>fields</code> that enforce the following:</p>
	<ul>
		<li>An authenticated user can select, update and delete its own user record.</li>
		<li>Asserts that the email provided by the user is actually an email address.</li>
		<li>Forbid users to use an email that is already in use by another user. We do this by creating a unique index for the email field.</li>
	</ul>
	<Code @name="docs/security/scope-authentication/user-table.surql" text="Define table and fields" />

	<Layout::gap tiny />

	<h4>Define the User scope</h4>
	<p>Define the <code>user</code> scope: allow users to signin and signup by using the table and fields defined in the previous step</p>
	<p>The scope is configured like this:</p>
	<ul>
		<li>Session tokens expire in 1 day. When a user signs up or signs in, a new session token is created.</li>
		<li>The sign in logic needs the <code>email</code> and <code>password</code> parameters to be provided by the user. In the scope logic, we use them as <code>$email</code> and <code>$password</code></li>
		<li>The sign up logic needs the <code>name</code>, <code>email</code> and <code>password</code> parameters to be provided by the user. In the scope logic, we can use them as <code>$name</code>, <code>$email</code> and <code>$password</code></li>
	</ul>
	<Code @name="docs/security/scope-authentication/user-scope.surql" text="Scope definition" />

	<Layout::gap tiny />

	<h4>Sign up to the scope</h4>
	<p>Now that the scope is defined, we can start using it.</p>
	<p>Examples using the JavaScript SDK or a raw HTTP request.</p>

	<h5>JavaScript SDK</h5>
	<Code @name="docs/security/scope-authentication/user-signup.js" />

	<h5>HTTP Request</h5>
	<Code @name="docs/security/scope-authentication/user-signup.bash" />

	<Layout::gap tiny />

	<h4>Sign in to the scope</h4>
	<p>Once a user has signed up, it can now sign in when needed.</p>
	<p>Examples using the JavaScript SDK or a raw HTTP request.</p>

	<h5>JavaScript SDK</h5>
	<Code @name="docs/security/scope-authentication/user-signin.js" />

	<h5>HTTP Request</h5>
	<Code @name="docs/security/scope-authentication/user-signin.bash" />
</Layout::Text>

<Layout::Gap large />
