<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.integration">Integrations</Crumb::Item>
	<Crumb::Item @link="docs.integration.sdks">SDKs</Crumb::Item>
	<Crumb::Item @link="docs.integration.sdks.deno">Deno</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
	<h2><Devicon @size="50" @type="denojs" /> Deno SDK for <img inline src="/static/img/text.svg" alt="SurrealDB" /></h2>
	<p>The SurrealDB SDK for Deno enables simple and advanced querying of a remote database from server-side code. All connections to SurrealDB are made over WebSockets, and automatically reconnect when the connection is terminated.</p>
	<p>To contribute to this documentation, <Link @link={{github}}>edit this file on GitHub</Link>.</p>
	<p>To contribute to the SDK code, <Link @link="https://github.com/surrealdb/surrealdb.js">submit an Issue or Pull Request here</Link>.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Connect to SurrealDB</h3>
	<p>Create a new mod.ts file and add the following code to try out some basic operations using the SurrealDB SDK.</p>
	<Code @name="docs/integration/libraries/deno/basic.js" />
	<p>Then run your app from the command line with:</p>
	<Code @name="docs-integration-libraries-deno-basic-run.bash">
		deno run --allow-net=127.0.0.1:8000 mod.ts
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>SDK methods</h3>
	<p>The JavaScript SDK comes with a number of built-in functions.</p>
</Layout::Text>

<Layout::Gap tiny />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#constructor">
						<Ascua::Prism::Inline @language="ts" @code="Surreal(url, options)" />
					</a>
					<l faint r>constructor</l>
				</td>
				<td>Connects to a local or remote database endpoint</td>
			</tr>
			<tr>
				<td>
					<a href="#connect">
						<Ascua::Prism::Inline @language="ts" @code="async db.connect(url, options)" />
					</a>
				</td>
				<td>Connects to a local or remote database endpoint</td>
			</tr>
			<tr>
				<td>
					<a href="#wait">
						<Ascua::Prism::Inline @language="ts" @code="async db.wait()" />
					</a>
				</td>
				<td>Waits for the connection to the database to succeed</td>
			</tr>
			<tr>
				<td>
					<a href="#close">
						<Ascua::Prism::Inline @language="ts" @code="async db.close()" />
					</a>
				</td>
				<td>Closes the persistent connection to the database</td>
			</tr>
			<tr>
				<td>
					<a href="#use">
						<Ascua::Prism::Inline @language="ts" @code="async db.use({ ns, db })" />
					</a>
				</td>
				<td>Switch to a specific namespace and database</td>
			</tr>
			<tr>
				<td>
					<a href="#info">
						<Ascua::Prism::Inline @language="ts" @code="async db.info<T>()" />
					</a>
				</td>
				<td>Returns the record of an authenticated scope user</td>
			</tr>
			<tr>
				<td>
					<a href="#signup">
						<Ascua::Prism::Inline @language="ts" @code="async db.signup(vars)" />
					</a>
				</td>
				<td>Signs this connection up to a specific authentication scope</td>
			</tr>
			<tr>
				<td>
					<a href="#signin">
						<Ascua::Prism::Inline @language="ts" @code="async db.signin(vars)" />
					</a>
				</td>
				<td>Signs this connection in to a specific authentication scope</td>
			</tr>
			<tr>
				<td>
					<a href="#invalidate">
						<Ascua::Prism::Inline @language="ts" @code="async db.invalidate()" />
					</a>
				</td>
				<td>Invalidates the authentication for the current connection</td>
			</tr>
			<tr>
				<td>
					<a href="#authenticate">
						<Ascua::Prism::Inline @language="ts" @code="async db.authenticate(token)" />
					</a>
				</td>
				<td>Authenticates the current connection with a JWT token</td>
			</tr>
			<tr>
				<td>
					<a href="#let">
						<Ascua::Prism::Inline @language="ts" @code="async db.let(key, val)" />
					</a>
				</td>
				<td>Assigns a value as a parameter for this connection</td>
			</tr>
			<tr>
				<td>
					<a href="#unset">
						<Ascua::Prism::Inline @language="ts" @code="async db.unset(key)" />
					</a>
				</td>
				<td>Removes a parameter for this connection</td>
			</tr>
			<tr>
				<td>
					<a href="#live">
						<Ascua::Prism::Inline @language="ts" @code="async db.live<T>(table, callback, diff)" />
					</a>
				</td>
				<td>Initiate a live query</td>
			</tr>
			<tr>
				<td>
					<a href="#listenLive">
						<Ascua::Prism::Inline @language="ts" @code="async db.listenLive<T>(queryUuid, callback)" />
					</a>
				</td>
				<td>Register a callback for a running live query</td>
			</tr>
			<tr>
				<td>
					<a href="#kill">
						<Ascua::Prism::Inline @language="ts" @code="async db.kill(queryUuid)" />
					</a>
				</td>
				<td>Kill a running live query</td>
			</tr>
			<tr>
				<td>
					<a href="#query">
						<Ascua::Prism::Inline @language="ts" @code="async db.query<T>(sql, vars)" />
					</a>
				</td>
				<td>Runs a set of SurrealQL statements against the database</td>
			</tr>
			<tr>
				<td>
					<a href="#select">
						<Ascua::Prism::Inline @language="ts" @code="async db.select<T>(thing)" />
					</a>
				</td>
				<td>Selects all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#create">
						<Ascua::Prism::Inline @language="ts" @code="async db.create<T, U>(thing, data)" />
					</a>
				</td>
				<td>Creates a record in the database</td>
			</tr>
			<tr>
				<td>
					<a href="#insert">
						<Ascua::Prism::Inline @language="ts" @code="async db.insert<T, U>(thing, data)" />
					</a>
				</td>
				<td>Inserts one or multiple records in the database</td>
			</tr>
			<tr>
				<td>
					<a href="#update">
						<Ascua::Prism::Inline @language="ts" @code="async db.update<T, U>(thing, data)" />
					</a>
				</td>
				<td>Updates all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#merge">
						<Ascua::Prism::Inline @language="ts" @code="async db.merge<T, U>(thing, data)" />
					</a>
				</td>
				<td>Modifies all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#patch">
						<Ascua::Prism::Inline @language="ts" @code="async db.patch(thing, data)" />
					</a>
				</td>
				<td>Applies <Link @link="https://jsonpatch.com">JSON Patch</Link> changes to all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#delete">
						<Ascua::Prism::Inline @language="ts" @code="async db.delete<T>(thing)" />
					</a>
				</td>
				<td>Deletes all records, or a specific record</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "constructor"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="Surreal(url, options)" /></h3>
		<p>The <code>constructor</code> function passes on it's arguments to the <a href="#connect"><Ascua::Prism::Inline @language="ts" @code="async db.connect(url, options)" /></a> function.</p>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "connect"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.connect(url, options)" /></h3>
		<p>Connects to a local or remote database endpoint.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>url</code>
						</td>
						<td>
							The url of the database endpoint to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>options</code>
						</td>
						<td>
							An object with options to initiate the connection to SurrealDB.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-deno-connect.js">
			// Connect to a local endpoint
			await db.connect('http://127.0.0.1:8000/rpc');

			// Connect to a remote endpoint
			await db.connect('https://cloud.surrealdb.com/rpc');

			// Specify a namespace and database pair to use
			await db.connect('https://cloud.surrealdb.com/rpc', {
				ns: 'surrealdb',
				db: 'docs',
			});

			// Authenticate with an existing token
			// The .authenticate() function is used under the hood.
			await db.connect('https://cloud.surrealdb.com/rpc', {
				auth: '.....',
			});

			// Authenticate using a pair of credentials
			await db.connect('https://cloud.surrealdb.com/rpc', {
				auth: {
					user: 'root',
					pass: 'surrealdb',
				},
			});

			// Use advanced custom logic to prepare the connection to the database
			await db.connect('https://cloud.surrealdb.com/rpc', {
				prepare: async (db) => {
					await db.use({ ns: 'surrealdb', db: 'docs' });

					const token = await retrieveToken();
					if (token) await db.authenticate(token);

					// Any queries executed before the .prepare() function finishes will be forced to wait
					// Please note that this is also the case for queries executed within the prepare function
					// Doing so can cause the connection to stay in a initializing state
				},
			});
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "wait"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.wait()" /></h3>
		<p>Waits for the connection to the database to succeed.</p>
		<Code @name="docs-integration-libraries-deno-wait.js">
			await db.wait();
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "close"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.close()" /></h3>
		<p>Closes the persistent connection to the database.</p>
		<Code @name="docs-integration-libraries-deno-close.js">
			await db.close();
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "use"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="db.use({ ns, db })" /></h3>
		<p>Switch to a specific namespace and database. If only the <code>ns</code> or <code>db</code> property is specified, the current connection details will be used to fill the other property.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Properties</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>ns</code>
							<l yellow r>Initially required</l>
						</td>
						<td>
							Switches to a specific namespace.
						</td>
					</tr>
					<tr>
						<td>
							<code>db</code>
							<l yellow r>Initially required</l>
						</td>
						<td>
							Switches to a specific database.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-deno-use.js">
			await db.use({ ns: 'surrealdb', db: 'docs' });
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "info"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.info<T>()" /></h3>
		<p>This method returns the record of an authenticated scope user.</p>
		<Code @name="docs-integration-libraries-javascript-info.js">
			const user = await db.info();
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "signup"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.signup({ NS, DB, SC, [...] })" /></h3>
		<p>Signs up to a specific authentication scope.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Properties</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>NS</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The namespace to sign up to
						</td>
					</tr>
					<tr>
						<td>
							<code>DB</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The database to sign up to
						</td>
					</tr>
					<tr>
						<td>
							<code>SC</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The scope to sign up to. Also pass any variables used in the scope
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-deno-signup.js">
			const token = await db.signup({
				NS: 'surrealdb',
				DB: 'docs',
				SC: 'user',

				// Also pass any properties required by the scope definition
				email: 'info@surrealdb.com',
				pass: '123456',
			});
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "signin"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.signin({ ... })" /></h3>
		<p>Signs in to a root, namespace, database or scope user.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Properties</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>user</code>
							<l yellow r>Required for root, NS & DB</l>
						</td>
						<td>
							The username of the database user
						</td>
					</tr>
					<tr>
						<td>
							<code>pass</code>
							<l yellow r>Required for root, NS & DB</l>
						</td>
						<td>
							The password of the database user
						</td>
					</tr>
					<tr>
						<td>
							<code>NS</code>
							<l yellow r>Required for DB & SC</l>
						</td>
						<td>
							The namespace to sign in to
						</td>
					</tr>
					<tr>
						<td>
							<code>DB</code>
							<l yellow r>Required for SC</l>
						</td>
						<td>
							The database to sign in to
						</td>
					</tr>
					<tr>
						<td>
							<code>SC</code>
						</td>
						<td>
							The scope to sign in to. Also pass any variables used in the scope
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-deno-signin.js">
			// Authenticate with a root user
			const token = await db.signin({
				user: 'root',
				pass: 'surrealdb',
			});

			// Authenticate with a Namespace user
			const token = await db.signin({
				NS: 'surrealdb',
				user: 'tobie',
				pass: 'surrealdb',
			});

			// Authenticate with a Database user
			const token = await db.signin({
				NS: 'surrealdb',
				DB: 'docs',
				user: 'tobie',
				pass: 'surrealdb',
			});

			// Authenticate with a Scope user
			const token = await db.signin({
				NS: 'surrealdb',
				DB: 'docs',
				SC: 'user',

				// Also pass any properties required by the scope definition
				email: 'info@surrealdb.com',
				pass: '123456',
			});
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "invalidate"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.invalidate()" /></h3>
		<p>Invalidates the authentication for the current connection.</p>
		<Code @name="docs-integration-libraries-deno-invalidate.js">
			await db.invalidate();
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "authenticate"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.authenticate(token)" /></h3>
		<p>Authenticates the current connection with a JWT token.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>token</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The JWT authentication token.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-deno-authenticate.js">
			await db.authenticate('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA');
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "let"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.let(key, val)" /></h3>
		<p>Assigns a value as a parameter for this connection.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>key</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the name of the variable.
						</td>
					</tr>
					<tr>
						<td>
							<code>val</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Assigns the value to the variable name.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-deno-let.js">
			// Assign the variable on the connection
			await db.let('name', {
				first: 'Tobie',
				last: 'Morgan Hitchcock',
			});

			// Use the variable in a subsequent query
			await db.query('CREATE person SET name = $name');

			// Use the variable in a subsequent query
			await db.query('SELECT * FROM person WHERE name.first = $name.first');
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "unset"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.unset(key)" /></h3>
		<p>Removes a parameter for this connection.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>key</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the name of the variable.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-deno-unset.js">
			// Remove the variable from the connection
			await db.unset('name');
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "live"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.live<T>(table, callback, diff)" /></h3>
		<p>Initiates a live query.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>table</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name to listen for changes for
						</td>
					</tr>
					<tr>
						<td>
							<code>callback</code>
							<l faint r>Optional</l>
						</td>
						<td>
							A callback function that processes live notifications
						</td>
					</tr>
					<tr>
						<td>
							<code>diff</code>
							<l faint r>Optional</l>
						</td>
						<td>
							If set to true, live notifications will include an array of <Link @link="https://jsonpatch.com">JSON Patch</Link> objects, rather than the entire record for each notification.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-live.js">
			// The uuid of the live query will be returned
			const queryUuid = await db.live(
				"person",
				// The callback function takes an object with the "action" and "result" properties
				({ action, result }) => {
					// action can be: "CREATE", "UPDATE", "DELETE" or "CLOSE"
				    if (action === 'CLOSE") return;

					// result contains either the entire record, or a set of JSON patches when diff mode is enabled
					processSomeLiveQueryUpdate(result);
				}
			)
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "listenLive"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.listenLive<T>(queryUuid, callback)" /></h3>
		<p>Registers a callback function for a running live query.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>queryUuid</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The UUID of a running live query
						</td>
					</tr>
					<tr>
						<td>
							<code>callback</code>
							<l yellow r>Required</l>
						</td>
						<td>
							A callback function that processes live notifications
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-live.js">
			await db.listenLive(
				queryUuid,
				// The callback function takes an object with the "action" and "result" properties
				({ action, result }) => {
					// action can be: "CREATE", "UPDATE", "DELETE" or "CLOSE"
				    if (action === 'CLOSE") return;

					// result contains either the entire record, or a set of JSON patches when diff mode is enabled
					processSomeLiveQueryUpdate(result);
				}
			)
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "kill"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.kill(queryUuid)" /></h3>
		<p>Kills a running live query by it's UUID</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>queryUuid</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The UUID of the live query you wish to kill
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-live.js">
			await db.kill(queryUuid)
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "query"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.query<T>(query, vars)" /></h3>
		<p>Runs a set of SurrealQL statements against the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>query</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the SurrealQL statements.
						</td>
					</tr>
					<tr>
						<td>
							<code>vars</code>
							<l faint r>Optional</l>
						</td>
						<td>
							Assigns variables which can be used in the query.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/javascript/query.ts" @language="ts" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "select"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.select<T>(thing)" /></h3>
		<p>Selects all records in a table, or a specific record, from the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or a record ID to select.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/javascript/select.ts" @language="ts" />
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-deno-select-func.surql">
			SELECT * FROM $thing;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "create"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.create<T, U>(thing, data)" /></h3>
		<p>Creates a record in the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to create.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/javascript/create.ts" @language="ts" />
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-deno-create-func.surql">
			CREATE $thing CONTENT $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "insert"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.insert<T, U>(thing, data)" /></h3>
		<p>Insers one or multiple records in the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name to insert to.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							Either a single document/record or an array of documents/records to insert
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/javascript/insert.ts" @language="ts" />
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-javascript-insert-func.surql">
			INSERT INTO $thing $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "update"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.update<T, U>(thing, data)" /></h3>
		<p>Updates all records in a table, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function replaces the current document / record data with the specified data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to update.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/javascript/update.ts" @language="ts" />
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-deno-update-func.surql">
			UPDATE $thing CONTENT $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "merge"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.merge<T, U>(thing, data)" /></h3>
		<p>Modifies all records in a table, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function merges the current document / record data with the specified data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to merge
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/javascript/merge.ts" @language="ts" />
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-deno-merge-func.surql">
			UPDATE $thing MERGE $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "patch"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.patch(thing, data)" /></h3>
		<p>Applies <Link @link="https://jsonpatch.com">JSON Patch</Link> changes to all records, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function patches the current document / record data with the specified <Link @link="https://jsonpatch.com">JSON Patch</Link> data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to patch.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The <Link @link="https://jsonpatch.com">JSON Patch</Link> data with which to patch the records.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/javascript/patch.ts" @language="ts" />
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-deno-patch-func.surql">
			UPDATE $thing PATCH $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "delete"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.delete<T>(thing)" /></h3>
		<p>Deletes all records in a table, or a specific record, from the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or a record ID to delete.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-deno-delete.ts" @language="ts">
			// Delete all records from a table
			await db.delete('person');

			// Delete a specific record from a table
			await db.delete('person:h5wxrf2ewk8xjxosxtyc');
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-deno-delete-func.surql">
			DELETE * FROM $thing;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />