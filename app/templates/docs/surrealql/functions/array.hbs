<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions">Functions</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions.array">Array functions</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Array functions</h2>
	<p>These functions can be used when working with, and manipulating arrays of data.</p>
	<blockquote green text="Note">Array functions also accept a <code>set</code> as an alternative to the array type.</blockquote>
</Layout::Text>

<Layout::Gap mini />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#add">
						<code>array::add()</code>
					</a>
				</td>
				<td>Adds an item to an array if it doesn't exist</td>
			</tr>
			<tr>
				<td>
					<a href="#all">
						<code>array::all()</code>
					</a>
				</td>
				<td>Checks whether all array values are truthy</td>
			</tr>
			<tr>
				<td>
					<a href="#any">
						<code>array::any()</code>
					</a>
				</td>
				<td>Checks whether any array value is truthy</td>
			</tr>
			<tr>
				<td>
					<a href="#append">
						<code>array::append()</code>
					</a>
				</td>
				<td>Appends an item to the end of an array</td>
			</tr>
			<tr>
				<td>
					<a href="#combine">
						<code>array::combine()</code>
					</a>
				</td>
				<td>Combines all values from two arrays together</td>
			</tr>
			<tr>
				<td>
					<a href="#complement">
						<code>array::complement()</code>
					</a>
				</td>
				<td>Returns the complement of two arrays</td>
			</tr>
            <tr>
				<td>
					<a href="#concat">
						<code>array::concat()</code>
					</a>
				</td>
                <td>Returns the merged values from two arrays</td>
			</tr>
			<tr>
				<td>
					<a href="#difference">
						<code>array::difference()</code>
					</a>
				</td>
				<td>Returns the difference between two arrays</td>
			</tr>
			<tr>
				<td>
					<a href="#distinct">
						<code>array::distinct()</code>
					</a>
				</td>
				<td>Returns the unique items in an array</td>
			</tr>
			<tr>
				<td>
					<a href="#flatten">
						<code>array::flatten()</code>
					</a>
				</td>
				<td>Flattens multiple arrays into a single array</td>
			</tr>
			<tr>
				<td>
					<a href="#group">
						<code>array::group()</code>
					</a>
				</td>
				<td>Flattens and returns the unique items in an array</td>
			</tr>
			<tr>
				<td>
					<a href="#insert">
						<code>array::insert()</code>
					</a>
				</td>
				<td>Inserts an item at the end of an array, or in a specific position</td>
			</tr>
			<tr>
				<td>
					<a href="#intersect">
						<code>array::intersect()</code>
					</a>
				</td>
				<td>Returns the values which intersect two arrays</td>
			</tr>
			<tr>
				<td>
					<a href="#len">
						<code>array::len()</code>
					</a>
				</td>
				<td>Returns the length of an array</td>
			</tr>
			<tr>
				<td>
					<a href="#max">
						<code>array::max()</code>
					</a>
				</td>
				<td>Returns the maximum item in an array</td>
			</tr>
			<tr>
				<td>
					<a href="#min">
						<code>array::min()</code>
					</a>
				</td>
				<td>Returns the minimum item in an array</td>
			</tr>
			<tr>
				<td>
					<a href="#pop">
						<code>array::pop()</code>
					</a>
				</td>
				<td>Returns the last item from an array</td>
			</tr>
			<tr>
				<td>
					<a href="#prepend">
						<code>array::prepend()</code>
					</a>
				</td>
				<td>Prepends an item to the beginning of an array</td>
			</tr>
			<tr>
				<td>
					<a href="#push">
						<code>array::push()</code>
					</a>
				</td>
				<td>Appends an item to the end of an array</td>
			</tr>
			<tr>
				<td>
					<a href="#remove">
						<code>array::remove()</code>
					</a>
				</td>
				<td>Removes an item at a specific position from an array</td>
			</tr>
			<tr>
				<td>
					<a href="#reverse">
						<code>array::reverse()</code>
					</a>
				</td>
				<td>Reverses the sorting order of an array</td>
			</tr>
			<tr>
				<td>
					<a href="#slice">
						<code>array::slice()</code>
					</a>
				</td>
				<td>Slice an array from and to a certain index</td>
			</tr>
			<tr>
				<td>
					<a href="#sort">
						<code>array::sort()</code>
					</a>
				</td>
				<td>Sorts the values in an array in ascending or descending order</td>
			</tr>
			<tr>
				<td>
					<a href="#sort-asc">
						<code>array::sort::asc()</code>
					</a>
				</td>
				<td>Sorts the values in an array in ascending order</td>
			</tr>
			<tr>
				<td>
					<a href="#sort-desc">
						<code>array::sort::desc()</code>
					</a>
				</td>
				<td>Sorts the values in an array in descending order</td>
			</tr>
			<tr>
				<td>
					<a href="#union">
						<code>array::union()</code>
					</a>
				</td>
				<td>Returns the unique merged values from two arrays</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "add"}}>

	<Layout::Text text-l text-f>
		<h3>array::add</h3>
		<p>The <code>array::add</code> function adds an item to an array only if it doesn't exist.</p>
		<Code @name="docs-surrealql-functions-array-add.surql" text="API Definition">
			array::add(array, any) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-add-input.surql">
				SELECT * FROM array::add(["one", "two"], "three");
			</Code>
			<Code @name="docs-surrealql-functions-array-add-result.txt">
				["one", "two", "three"]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "all"}}>

	<Layout::Text text-l text-f>
		<h3>array::all</h3>
		<p>The <code>array::all</code> function checks whether all array values are truthy.</p>
		<Code @name="docs-surrealql-functions-array-all.surql" text="API Definition">
			array::all(array) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-all-input.surql">
				SELECT * FROM array::all([1, 2, 3, NONE, 'SurrealDB', 5]);
			</Code>
			<Code @name="docs-surrealql-functions-array-all-result.txt">
				false
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "any"}}>

	<Layout::Text text-l text-f>
		<h3>array::any</h3>
		<p>The <code>array::any</code> function checks whether any array values are truthy.</p>
		<Code @name="docs-surrealql-functions-array-any.surql" text="API Definition">
			array::any(array) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-any-input.surql">
				SELECT * FROM array::any([1, 2, 3, NONE, 'SurrealDB', 5]);
			</Code>
			<Code @name="docs-surrealql-functions-array-any-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "append"}}>

	<Layout::Text text-l text-f>
		<h3>array::append</h3>
		<p>The <code>array::append</code> function appends a value to the end of an array.</p>
		<Code @name="docs-surrealql-functions-array-append.surql" text="API Definition">
			array::append(array, any) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-append-input.surql">
				SELECT * FROM array::append([1,2,3,4], 5);
			</Code>
			<Code @name="docs-surrealql-functions-array-append-result.txt">
				[1,2,3,4,5]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "combine"}}>

	<Layout::Text text-l text-f>
		<h3>array::combine</h3>
		<p>The <code>array::combine</code> function combines all values from two arrays together, returning an array of arrays.</p>
		<Code @name="docs-surrealql-functions-array-combine.surql" text="API Definition">
			array::combine(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-combine-input.surql">
				SELECT * FROM array::combine([1,2], [2,3]);
			</Code>
			<Code @name="docs-surrealql-functions-array-combine-result.txt">
				[ [1,2], [1,3], [2,2], [2,3] ]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "complement"}}>

	<Layout::Text text-l text-f>
		<h3>array::complement</h3>
		<p>The <code>array::complement</code> function returns the complement of two arrays, returning a single array containing items which are not in the second array.</p>
		<Code @name="docs-surrealql-functions-array-complement.surql" text="API Definition">
			array::complement(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-complement-input.surql">
				SELECT * FROM array::complement([1,2,3,4], [3,4,5,6]);
			</Code>
			<Code @name="docs-surrealql-functions-array-complement-result.txt">
				[1,2]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "concat"}}>

	<Layout::Text text-l text-f>
		<h3>array::concat</h3>
		<p>The <code>array::concat</code> function merges two arrays together, returning an array which may contain duplicate values. If you want to remove duplicate values from the resulting array, then use the <Link @link="#union"><code>array::union()</code></Link> function</p>
		<Code @name="docs-surrealql-functions-array-concat.surql" text="API Definition">
			array::concat(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-concat-input.surql">
                SELECT * FROM array::concat([1,2,3,4], [3,4,5,6]);
			</Code>
			<Code @name="docs-surrealql-functions-array-concat-result.txt">
				[1,2,3,4,3,4,5,6]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "difference"}}>

	<Layout::Text text-l text-f>
		<h3>array::difference</h3>
		<p>The <code>array::difference</code> determines the difference between two arrays, returning a single array containing items which are not in both arrays.</p>
		<Code @name="docs-surrealql-functions-array-difference.surql" text="API Definition">
			array::difference(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-difference-input.surql">
				SELECT * FROM array::difference([1,2,3,4], [3,4,5,6]);
			</Code>
			<Code @name="docs-surrealql-functions-array-difference-result.txt">
				[1,2,5,6]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "distinct"}}>

	<Layout::Text text-l text-f>
		<h3>array::distinct</h3>
		<p>The <code>array::distinct</code> function calculates the unique values in an array, returning a single array.</p>
		<Code @name="docs-surrealql-functions-array-distinct.surql" text="API Definition">
			array::distinct(array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-distinct-input.surql">
				SELECT * FROM array::distinct([1,2,1,3,3,4]);
			</Code>
			<Code @name="docs-surrealql-functions-array-distinct-result.txt">
				[1,2,3,4]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "flatten"}}>

	<Layout::Text text-l text-f>
		<h3>array::flatten</h3>
		<p>The <code>array::flatten</code> flattens an array of arrays, returning a new array with all sub-array elements concatenated into it.</p>
		<Code @name="docs-surrealql-functions-array-flatten.surql" text="API Definition">
			array::flatten(array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-flatten-input.surql">
				SELECT * FROM array::flatten([ [1,2], [3, 4], 'SurrealDB', [5, 6, [7, 8]] ]);
			</Code>
			<Code @name="docs-surrealql-functions-array-flatten-result.txt">
				[1, 2, 3, 4, 'SurrealDB', 5, 6, [7, 8]]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "group"}}>

	<Layout::Text text-l text-f>
		<h3>array::group</h3>
		<p>The <code>array::group</code> function flattens and returns the unique items in an array.</p>
		<Code @name="docs-surrealql-functions-array-group.surql" text="API Definition">
			array::group(array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-group-input.surql">
				SELECT * FROM array::group([1, 2, 3, 4, [3,5,6], [2,4,5,6], 7, 8, 8, 9]);
			</Code>
			<Code @name="docs-surrealql-functions-array-group-result.txt">
				[1,2,3,4,5,6,7,8,9]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "insert"}}>

	<Layout::Text text-l text-f>
		<h3>array::insert</h3>
		<p>The <code>array::insert</code> function inserts a value into an array at a specific position.</p>
		<Code @name="docs-surrealql-functions-array-insert.surql" text="API Definition">
			array::insert(array, any, number) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-insert-input.surql">
				SELECT * FROM array::insert([1,2,3,4], 5, 2);
			</Code>
			<Code @name="docs-surrealql-functions-array-insert-result.txt">
				[1,2,5,3,4]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "intersect"}}>

	<Layout::Text text-l text-f>
		<h3>array::intersect</h3>
		<p>The <code>array::intersect</code> function calculates the values which intersect two arrays, returning a single array containing the values which are in both arrays.</p>
		<Code @name="docs-surrealql-functions-array-intersect.surql" text="API Definition">
			array::intersect(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-intersect-input.surql">
				SELECT * FROM array::intersect([1,2,3,4], [3,4,5,6]);
			</Code>
			<Code @name="docs-surrealql-functions-array-intersect-result.txt">
				[3,4]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "len"}}>

	<Layout::Text text-l text-f>
		<h3>array::len</h3>
		<p>The <code>array::len</code> function calculates the length of an array, returning a number. This function includes all items when counting the number of items in the array. If you want to only count truthy values, then use the <Link @link="docs.surrealql.functions.count"><code>count()</code></Link> function.</p>
		<Code @name="docs-surrealql-functions-array-len.surql" text="API Definition">
			array::len(array) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-len-input.surql">
				SELECT * FROM array::len([1,2,1,null,"something",3,3,4,0]);
			</Code>
			<Code @name="docs-surrealql-functions-array-len-result.txt">
				9
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "pop"}}>

	<Layout::Text text-l text-f>
		<h3>array::pop</h3>
		<p>The <code>array::pop</code> function removes a value from the end of an array and returns it.</p>
		<Code @name="docs-surrealql-functions-array-pop.surql" text="API Definition">
			array::pop(array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-pop-input.surql">
				SELECT * FROM array::pop([1,2,3,4]);
			</Code>
			<Code @name="docs-surrealql-functions-array-pop-result.txt">
				4
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "prepend"}}>

	<Layout::Text text-l text-f>
		<h3>array::prepend</h3>
		<p>The <code>array::prepend</code> function prepends a value to the end of an array.</p>
		<Code @name="docs-surrealql-functions-array-prepend.surql" text="API Definition">
			array::prepend(array, any) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-prepend-input.surql">
				SELECT * FROM array::prepend([1,2,3,4], 5);
			</Code>
			<Code @name="docs-surrealql-functions-array-prepend-result.txt">
				[5,1,2,3,4]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "push"}}>

	<Layout::Text text-l text-f>
		<h3>array::push</h3>
		<p>The <code>array::push</code> function appends a value to the end of an array.</p>
		<Code @name="docs-surrealql-functions-array-push.surql" text="API Definition">
			array::push(array, any) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-push-input.surql">
				SELECT * FROM array::push([1,2,3,4], 5);
			</Code>
			<Code @name="docs-surrealql-functions-array-push-result.txt">
				[1,2,3,4,5]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "remove"}}>

	<Layout::Text text-l text-f>
		<h3>array::remove</h3>
		<p>The <code>array::remove</code> function removes an item from a specific position in an array.</p>
		<Code @name="docs-surrealql-functions-array-remove.surql" text="API Definition">
			array::remove(array, number) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-remove-input.surql">
				SELECT * FROM array::remove([1,2,3,4,5], 2);
			</Code>
			<Code @name="docs-surrealql-functions-array-remove-result.txt">
				[1,2,4,5]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "reverse"}}>

	<Layout::Text text-l text-f>
		<h3>array::reverse</h3>
		<p>The <code>array::reverse</code> function appends a value to the end of an array.</p>
		<Code @name="docs-surrealql-functions-array-reverse.surql" text="API Definition">
			array::reverse(array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-reverse-input.surql">
				SELECT * FROM array::reverse([1,2,3,4,5]);
			</Code>
			<Code @name="docs-surrealql-functions-array-reverse-result.txt">
				[5,4,3,2,1]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "slice"}}>

	<Layout::Text text-l text-f>
		<h3>array::slice</h3>
		<p>The <code>array::slice</code> function slices an array from and until a certain index.</p>
		<Code @name="docs-surrealql-functions-array-slice.surql" text="API Definition">
			array::slice(array, begin, limit) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-slice-input.surql">
				SELECT * FROM array::slice(['a', 'b', 'c', 'd', 'e'], 1, 2);
			</Code>
			<Code @name="docs-surrealql-functions-array-slice-result.txt">
				['b', 'c']
			</Code>
		</codes>
		<p>The <code>array::slice</code> function also allows negative lookups:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-slice-negative-begin-input.surql">
				SELECT * FROM array::slice(['a', 'b', 'c', 'd', 'e'], -3);
			</Code>
			<Code @name="docs-surrealql-functions-array-slice-negative-begin-result.txt">
				['c', 'd', 'e']
			</Code>
		</codes>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-slice-negative-limit-input.surql">
				SELECT * FROM array::slice(['a', 'b', 'c', 'd', 'e'], 1, -1);
			</Code>
			<Code @name="docs-surrealql-functions-array-slice-negative-limit-result.txt">
				['b', 'c', 'd']
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "sort"}}>

	<Layout::Text text-l text-f>
		<h3>array::sort</h3>
		<p>The <code>array::sort</code> function calculates the length of an array, returning a number. This function includes all items when counting the number of items in the array. If you want to only count truthy values, then use the <Link @link="docs.surrealql.functions.count"><code>count()</code></Link> function.</p>
		<Code @name="docs-surrealql-functions-array-sort-1.surql" text="API Definition">
			array::sort(array) -> array
		</Code>
		<p>The function also accepts a second <Link @link="docs.surrealql.datamodel.simple">boolean</Link> parameter which determines the sorting direction. The second parameter can be <Ascua::Prism::Inline @language="surql" @code="true" /> for ascending order, or <Ascua::Prism::Inline @language="surql" @code="false" /> for descending order.</p>
		<Code @name="docs-surrealql-functions-array-sort-2.surql" text="API Definition">
			array::sort(array, bool) -> array
		</Code>
		<p>The function also accepts a second <Link @link="docs.surrealql.datamodel.simple">string</Link> parameter which determines the sorting direction. The second parameter can be <Ascua::Prism::Inline @language="surql" @code="'asc'" /> for ascending order, or <Ascua::Prism::Inline @language="surql" @code="'desc'" /> for descending order.</p>
		<Code @name="docs-surrealql-functions-array-sort-3.surql" text="API Definition">
			array::sort(array, string) -> array
		</Code>
		<p>The following examples show this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-input-1.surql">
				SELECT * FROM array::sort([1,2,1,null,"something",3,3,4,0]);
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-result-1.txt">
				[null,0,1,1,2,3,3,4,"something"]
			</Code>
		</codes>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-input-2.surql">
				SELECT * FROM array::sort([1,2,1,null,"something",3,3,4,0], false);
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-result-2.txt">
				["something",4,3,3,2,1,1,9,null]
			</Code>
		</codes>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-input-3.surql">
				SELECT * FROM array::sort([1,2,1,null,"something",3,3,4,0], "asc");
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-result-3.txt">
				[null,0,1,1,2,3,3,4,"something"]
			</Code>
		</codes>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-input-4.surql">
				SELECT * FROM array::sort([1,2,1,null,"something",3,3,4,0], "desc");
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-result-4.txt">
				["something",4,3,3,2,1,1,9,null]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "sort-asc"}}>

	<Layout::Text text-l text-f>
		<h3>array::sort::asc</h3>
		<p>The <code>array::sort::asc</code> function is a shorthand convenience function for the <code>array::sort</code> function, to sort values in an array in ascending order.</p>
		<Code @name="docs-surrealql-functions-array-sort-asc.surql" text="API Definition">
			array::sort::asc(array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-asc-input.surql">
				SELECT * FROM array::sort::asc([1,2,1,null,"something",3,3,4,0]);
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-asc-result.txt">
				[null,0,1,1,2,3,3,4,"something"]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "sort-desc"}}>

	<Layout::Text text-l text-f>
		<h3>array::sort::desc</h3>
		<p>The <code>array::sort::desc</code> function is a shorthand convenience function for the <code>array::sort</code> function, to sort values in an array in descending order.</p>
		<Code @name="docs-surrealql-functions-array-sort-desc.surql" text="API Definition">
			array::sort::desc(array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-sort-desc-input.surql">
				SELECT * FROM array::sort::desc([1,2,1,null,"something",3,3,4,0]);
			</Code>
			<Code @name="docs-surrealql-functions-array-sort-desc-result.txt">
				["something",4,3,3,2,1,1,9,null]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "union"}}>

	<Layout::Text text-l text-f>
		<h3>array::union</h3>
		<p>The <code>array::union</code> function combines two arrays together, removing duplicate values, and returning a single array.</p>
		<Code @name="docs-surrealql-functions-array-union.surql" text="API Definition">
			array::union(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-array-union-input.surql">
				SELECT * FROM array::union([1,2,1,6], [1,3,4,5,6]);
			</Code>
			<Code @name="docs-surrealql-functions-array-union-result.txt">
				[1,2,6,3,4,5]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />