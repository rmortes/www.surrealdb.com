<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions">Functions</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions.string">String functions</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>String functions</h2>
	<p>These functions can be used when working with and manipulating text and string values.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#concat">
						<code>string::concat()</code>
					</a>
				</td>
				<td>Concatenates strings together</td>
			</tr>
			<tr>
				<td>
					<a href="#contains">
						<code>string::contains()</code>
					</a>
				</td>
				<td>Check wether a string contains another string</td>
			</tr>
			<tr>
				<td>
					<a href="#endsWith">
						<code>string::endsWith()</code>
					</a>
				</td>
				<td>Checks whether a string ends with another string</td>
			</tr>
			<tr>
				<td>
					<a href="#join">
						<code>string::join()</code>
					</a>
				</td>
				<td>Joins strings together with a delimiter</td>
			</tr>
			<tr>
				<td>
					<a href="#len">
						<code>string::len()</code>
					</a>
				</td>
				<td>Returns the length of a string</td>
			</tr>
			<tr>
				<td>
					<a href="#lowercase">
						<code>string::lowercase()</code>
					</a>
				</td>
				<td>Converts a string to lowercase</td>
			</tr>
			<tr>
				<td>
					<a href="#repeat">
						<code>string::repeat()</code>
					</a>
				</td>
				<td>Repeats a string a number of times</td>
			</tr>
			<tr>
				<td>
					<a href="#replace">
						<code>string::replace()</code>
					</a>
				</td>
				<td>Replaces an occurence of a string with another string</td>
			</tr>
			<tr>
				<td>
					<a href="#reverse">
						<code>string::reverse()</code>
					</a>
				</td>
				<td>Reverses a string</td>
			</tr>
			<tr>
				<td>
					<a href="#slice">
						<code>string::slice()</code>
					</a>
				</td>
				<td>Extracts and returns a section of a string</td>
			</tr>
			<tr>
				<td>
					<a href="#slug">
						<code>string::slug()</code>
					</a>
				</td>
				<td>Converts a string into human and URL-friendly string</td>
			</tr>
			<tr>
				<td>
					<a href="#split">
						<code>string::split()</code>
					</a>
				</td>
				<td>Divides a string into an ordered list of substrings</td>
			</tr>
			<tr>
				<td>
					<a href="#startsWith">
						<code>string::startsWith()</code>
					</a>
				</td>
				<td>Checks whether a string starts with another string</td>
			</tr>
			<tr>
				<td>
					<a href="#trim">
						<code>string::trim()</code>
					</a>
				</td>
				<td>Removes whitespace from the start and end of a string</td>
			</tr>
			<tr>
				<td>
					<a href="#uppercase">
						<code>string::uppercase()</code>
					</a>
				</td>
				<td>Converts a string to uppercase</td>
			</tr>
			<tr>
				<td>
					<a href="#words">
						<code>string::words()</code>
					</a>
				</td>
				<td>Splits a string into an array of separate words</td>
			</tr>
			<tr>
				<td>
					<a href="#is-alphanum">
						<code>string::is_alphanum()</code>
					</a>
				</td>
				<td>Checks whether a value has only alphanumeric characters</td>
			</tr>
			<tr>
				<td>
					<a href="#is-alpha">
						<code>string::is_alpha()</code>
					</a>
				</td>
				<td>Checks whether a value has only alpha characters</td>
			</tr>
			<tr>
				<td>
					<a href="#is-ascii">
						<code>string::is_ascii()</code>
					</a>
				</td>
				<td>Checks whether a value has only ascii characters</td>
			</tr>
			<tr>
				<td>
					<a href="#is-format">
						<code>string::is_format()</code>
					</a>
				</td>
				<td>Checks whether a value matches a format format</td>
			</tr>
			<tr>
				<td>
					<a href="#is-domain">
						<code>string::is_domain()</code>
					</a>
				</td>
				<td>Checks whether a value is a domain</td>
			</tr>
			<tr>
				<td>
					<a href="#is-email">
						<code>string::is_email()</code>
					</a>
				</td>
				<td>Checks whether a value is an email</td>
			</tr>
			<tr>
				<td>
					<a href="#is-hexadecimal">
						<code>string::is_hexadecimal()</code>
					</a>
				</td>
				<td>Checks whether a value is hexadecimal</td>
			</tr>
			<tr>
				<td>
					<a href="#is-latitude">
						<code>string::is_latitude()</code>
					</a>
				</td>
				<td>Checks whether a value is a latitude value</td>
			</tr>
			<tr>
				<td>
					<a href="#is-longitude">
						<code>string::is_longitude()</code>
					</a>
				</td>
				<td>Checks whether a value is a longitude value</td>
			</tr>
			<tr>
				<td>
					<a href="#is-numeric">
						<code>string::is_numeric()</code>
					</a>
				</td>
				<td>Checks whether a value has only numeric characters</td>
			</tr>
			<tr>
				<td>
					<a href="#is-semver">
						<code>string::is_semver()</code>
					</a>
				</td>
				<td>Checks whether a value matches a semver version</td>
			</tr>
			<tr>
				<td>
					<a href="#is-url">
						<code>string::is_url()</code>
					</a>
				</td>
				<td>Checks whether a value is a valid URL</td>
			</tr>
			<tr>
				<td>
					<a href="#is-uuid">
						<code>string::is_uuid()</code>
					</a>
				</td>
				<td>Checks whether a value is a UUID</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "concat"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::concat</code></h3>
		<p>The <code>string::concat</code> function concatenates strings together.</p>
		<Code @name="docs-surrealql-functions-string-concat.surql" text="API Definition">
			string::concat(string...) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-concat-input.surql">
				RETURN string::concat('this', ' ', 'is', ' ', 'a', ' ', 'test');
			</Code>
			<Code @name="docs-surrealql-functions-string-concat-result.txt">
				"this is a test"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "contains"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::contains</code></h3>
		<p>The <code>string::contains</code> function checks wether a string contains another string.</p>
		<Code @name="docs-surrealql-functions-string-contains.surql" text="API Definition">
			string::contains(string, string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-contains-input.surql">
				RETURN string::contains('abcdefg', 'cde');
			</Code>
			<Code @name="docs-surrealql-functions-string-contains-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "endsWith"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::endsWith</code></h3>
		<p>The <code>string::endsWith</code> function checks whether a string ends with another string.</p>
		<Code @name="docs-surrealql-functions-string-endsWith.surql" text="API Definition">
			string::endsWith(string, string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-endsWith-input.surql">
				RETURN string::endsWith('some test', 'test');
			</Code>
			<Code @name="docs-surrealql-functions-string-endsWith-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "join"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::join</code></h3>
		<p>The <code>string::join</code> function joins strings together with a delimiter.</p>
		<Code @name="docs-surrealql-functions-string-join.surql" text="API Definition">
			string::join(string, string...) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-join-input.surql">
				RETURN string::join(', ', 'a', 'list', 'of', 'items');
			</Code>
			<Code @name="docs-surrealql-functions-string-join-result.txt">
				"a, list, of, items"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "len"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::len</code></h3>
		<p>The <code>string::len</code> function returns the length of a given string.</p>
		<Code @name="docs-surrealql-functions-string-len.surql" text="API Definition">
			string::len(string) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-len-input.surql">
				RETURN string::len('this is a test');
			</Code>
			<Code @name="docs-surrealql-functions-string-len-result.txt">
				14
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "lowercase"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::lowercase</code></h3>
		<p>The <code>string::lowercase</code> function converts a string to lowercase.</p>
		<Code @name="docs-surrealql-functions-string-lowercase.surql" text="API Definition">
			string::lowercase(string) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-lowercase-input.surql">
				RETURN string::lowercase('THIS IS A TEST');
			</Code>
			<Code @name="docs-surrealql-functions-string-lowercase-result.txt">
				"this is a test"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "repeat"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::repeat</code></h3>
		<p>The <code>string::repeat</code> function repeats a string a number of times.</p>
		<Code @name="docs-surrealql-functions-string-repeat.surql" text="API Definition">
			string::repeat(string, number) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-repeat-input.surql">
				RETURN string::repeat('test', 3);
			</Code>
			<Code @name="docs-surrealql-functions-string-repeat-result.txt">
				"testtesttest"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "replace"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::replace</code></h3>
		<p>The <code>string::replace</code> function replaces an occurence of a string with another string.</p>
		<Code @name="docs-surrealql-functions-string-replace.surql" text="API Definition">
			string::replace(string, string, string) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-replace-input.surql">
				RETURN string::replace('this is a test', 'a test', 'awesome');
			</Code>
			<Code @name="docs-surrealql-functions-string-replace-result.txt">
				"this is awesome"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "reverse"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::reverse</code></h3>
		<p>The <code>string::reverse</code> function reverses a string.</p>
		<Code @name="docs-surrealql-functions-string-reverse.surql" text="API Definition">
			string::reverse(string) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-reverse-input.surql">
				RETURN string::reverse('this is a test');
			</Code>
			<Code @name="docs-surrealql-functions-string-reverse-result.txt">
				"tset a si siht"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "slice"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::slice</code></h3>
		<p>The <code>string::slice</code> function extracts and returns a section of a string.</p>
		<Code @name="docs-surrealql-functions-string-slice.surql" text="API Definition">
			string::slice(string, number, number) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-slice-input.surql">
				RETURN string::slice('this is a test', 10, 4);
			</Code>
			<Code @name="docs-surrealql-functions-string-slice-result.txt">
				"test"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "slug"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::slug</code></h3>
		<p>The <code>string::slug</code> function converts a string into a human and URL-friendly string.</p>
		<Code @name="docs-surrealql-functions-string-slug.surql" text="API Definition">
			string::slug(string) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-slug-input.surql">
				RETURN string::slug('SurrealDB has launched #database #awesome');
			</Code>
			<Code @name="docs-surrealql-functions-string-slug-result.txt">
				"surrealdb-has-launched-database-awesome"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "split"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::split</code></h3>
		<p>The <code>string::split</code> function splits a string by a given delimiter.</p>
		<Code @name="docs-surrealql-functions-string-split.surql" text="API Definition">
			string::split(string, string) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-split-input.surql">
				RETURN string::split('this, is, a, list', ', ');
			</Code>
			<Code @name="docs-surrealql-functions-string-split-result.txt">
				["this", "is", "a", "list"]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "startsWith"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::startsWith</code></h3>
		<p>The <code>string::startsWith</code> function checks whether a string starts with another string.</p>
		<Code @name="docs-surrealql-functions-string-startsWith.surql" text="API Definition">
			string::startsWith(string, string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-startsWith-input.surql">
				RETURN string::startsWith('some test', 'some');
			</Code>
			<Code @name="docs-surrealql-functions-string-startsWith-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "trim"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::trim</code></h3>
		<p>The <code>string::trim</code> function removes whitespace from the start and end of a string.</p>
		<Code @name="docs-surrealql-functions-string-trim.surql" text="API Definition">
			string::trim(string) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-trim-input.surql">
				RETURN string::trim('    this is a test    ');
			</Code>
			<Code @name="docs-surrealql-functions-string-trim-result.txt">
				"this is a test"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "uppercase"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::uppercase</code></h3>
		<p>The <code>string::uppercase</code> function converts a string to uppercase.</p>
		<Code @name="docs-surrealql-functions-string-uppercase.surql" text="API Definition">
			string::uppercase(string) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-uppercase-input.surql">
				RETURN string::uppercase('this is a test');
			</Code>
			<Code @name="docs-surrealql-functions-string-uppercase-result.txt">
				"THIS IS A TEST"
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "words"}}>

	<Layout::Text text-l text-f>
		<h3><code>string::words</code></h3>
		<p>The <code>string::words</code> function splits a string into an array of separate words.</p>
		<Code @name="docs-surrealql-functions-string-words.surql" text="API Definition">
			string::words(string) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-string-words-input.surql">
				RETURN string::words('this is a test');
			</Code>
			<Code @name="docs-surrealql-functions-string-words-result.txt">
				["this", "is", "a", "test"]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-alphanum"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_alphanum</h3>
		<p>The <code>string::is_alphanum</code> function checks whether a value has only alphanumeric characters.</p>
		<Code @name="docs-surrealql-functions-is-alphanum.surql" text="API Definition">
			string::is_alphanum(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-alphanum-input.surql">
				RETURN string::is_alphanum("ABC123");
			</Code>
			<Code @name="docs-surrealql-functions-is-alphanum-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-alpha"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_alpha</h3>
		<p>The <code>string::is_alpha</code> function checks whether a value has only alpha characters.</p>
		<Code @name="docs-surrealql-functions-is-alpha.surql" text="API Definition">
			string::is_alpha(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-alpha-input.surql">
				RETURN string::is_alpha("ABCDEF");
			</Code>
			<Code @name="docs-surrealql-functions-is-alpha-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-ascii"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_ascii</h3>
		<p>The <code>string::is_ascii</code> function checks whether a value has only ascii characters.</p>
		<Code @name="docs-surrealql-functions-is-ascii.surql" text="API Definition">
			string::is_ascii(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-ascii-input.surql">
				RETURN string::is_ascii("ABC123");
			</Code>
			<Code @name="docs-surrealql-functions-is-ascii-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-format"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_format</h3>
		<p>The <code>string::is_format</code> function checks whether a value matches a specified format.</p>
		<Code @name="docs-surrealql-functions-is-format.surql" text="API Definition">
			string::is_format(string, string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-format-input.surql">
				RETURN string::is_format("2015-09-05 23:56:04", "%Y-%m-%d %H:%M:%S");
			</Code>
			<Code @name="docs-surrealql-functions-is-format-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

	<Layout::Gap tiny />

	<Link @link="docs.surrealql.datamodel.formatters">View all format options</Link>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-domain"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_domain</h3>
		<p>The <code>string::is_domain</code> function checks whether a value is a domain.</p>
		<Code @name="docs-surrealql-functions-is-domain.surql" text="API Definition">
			string::is_domain(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-domain-input.surql">
				RETURN string::is_domain("surrealdb.com");
			</Code>
			<Code @name="docs-surrealql-functions-is-domain-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-email"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_email</h3>
		<p>The <code>string::is_email</code> function checks whether a value is an email.</p>
		<Code @name="docs-surrealql-functions-is-email.surql" text="API Definition">
			string::is_email(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-email-input.surql">
				RETURN string::is_email("info@surrealdb.com");
			</Code>
			<Code @name="docs-surrealql-functions-is-email-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-hexadecimal"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_hexadecimal</h3>
		<p>The <code>string::is_hexadecimal</code> function checks whether a value is hexadecimal.</p>
		<Code @name="docs-surrealql-functions-is-hexadecimal.surql" text="API Definition">
			string::is_hexadecimal(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-hexadecimal-input.surql">
				RETURN string::is_hexadecimal("ff009e");
			</Code>
			<Code @name="docs-surrealql-functions-is-hexadecimal-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-latitude"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_latitude</h3>
		<p>The <code>string::is_latitude</code> function checks whether a value is a latitude value.</p>
		<Code @name="docs-surrealql-functions-is-latitude.surql" text="API Definition">
			string::is_latitude(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-latitude-input.surql">
				RETURN string::is_latitude("-0.118092");
			</Code>
			<Code @name="docs-surrealql-functions-is-latitude-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-longitude"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_longitude</h3>
		<p>The <code>string::is_longitude</code> function checks whether a value is a longitude value.</p>
		<Code @name="docs-surrealql-functions-is-longitude.surql" text="API Definition">
			string::is_longitude(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-longitude-input.surql">
				RETURN string::is_longitude("51.509865");
			</Code>
			<Code @name="docs-surrealql-functions-is-longitude-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-numeric"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_numeric</h3>
		<p>The <code>string::is_numeric</code> function checks whether a value has only numeric characters.</p>
		<Code @name="docs-surrealql-functions-is-numeric.surql" text="API Definition">
			string::is_numeric(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-numeric-input.surql">
				RETURN string::is_numeric("1484091748");
			</Code>
			<Code @name="docs-surrealql-functions-is-numeric-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-semver"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_semver</h3>
		<p>The <code>string::is_semver</code> function checks whether a value matches a semver version.</p>
		<Code @name="docs-surrealql-functions-is-semver.surql" text="API Definition">
			string::is_semver(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-semver-input.surql">
				RETURN string::is_semver("1.0.0");
			</Code>
			<Code @name="docs-surrealql-functions-is-semver-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-url"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_url</h3>
		<p>The <code>string::is_url</code> function checks whether a value is a valid URL.</p>
		<Code @name="docs-surrealql-functions-is-url.surql" text="API Definition">
			string::is_url(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-url-input.surql">
				RETURN string::is_url("https://surrealdb.com");
			</Code>
			<Code @name="docs-surrealql-functions-is-url-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "is-uuid"}}>

	<Layout::Text text-l text-f>
		<h3>string::is_uuid</h3>
		<p>The <code>string::is_uuid</code> function checks whether a value is a UUID.</p>
		<Code @name="docs-surrealql-functions-is-uuid.surql" text="API Definition">
			string::is_uuid(string) -> bool
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-uuid-input.surql">
				RETURN string::is_uuid("ad55cae8-cf02-47ee-92a7-e137fb644a84");
			</Code>
			<Code @name="docs-surrealql-functions-is-uuid-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />
