<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions">Functions</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions.geo">Geo functions</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Geo functions</h2>
	<p>These functions can be used when working with and analysing geospatial data.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#area">
						<code>geo::area()</code>
					</a>
				</td>
				<td>Calculates the area of a geometry</td>
			</tr>
			<tr>
				<td>
					<a href="#bearing">
						<code>geo::bearing()</code>
					</a>
				</td>
				<td>Calculates the bearing between two geolocation points</td>
			</tr>
			<tr>
				<td>
					<a href="#centroid">
						<code>geo::centroid()</code>
					</a>
				</td>
				<td>Calculates the centroid of a geometry</td>
			</tr>
			<tr>
				<td>
					<a href="#distance">
						<code>geo::distance()</code>
					</a>
				</td>
				<td>Calculates the distance between two geolocation points</td>
			</tr>
			<tr>
				<td>
					<a href="#hash-decode">
						<code>geo::hash::decode()</code>
					</a>
				</td>
				<td>Decodes a geohash into a geometry point</td>
			</tr>
			<tr>
				<td>
					<a href="#hash-encode">
						<code>geo::hash::encode()</code>
					</a>
				</td>
				<td>Encodes a geometry point into a geohash</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "area"}}>

	<Layout::Text text-l text-f>
		<h3>geo::area</h3>
		<p>The <code>geo::area</code> function calculates the area of a geometry.</p>
		<Code @name="docs-surrealql-functions-geo-area.surql" text="API Definition">
			geo::area(geometry) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-geo-area-input.surql">
				RETURN geo::area({
					type: "Polygon",
					coordinates: [[
						[-0.38314819, 51.37692386], [0.1785278, 51.37692386],
						[0.1785278, 51.61460570], [-0.38314819, 51.61460570],
						[-0.38314819, 51.37692386]
					]]
				});
			</Code>
			<Code @name="docs-surrealql-functions-geo-area-result.txt">
				0.13350018278702186
			</Code>
		</codes>
		<p>If the argument is not a geometry type, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-geo-area-error-input.surql">
				RETURN geo::area(12345);
			</Code>
			<Code @name="docs-surrealql-functions-geo-area-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "bearing"}}>

	<Layout::Text text-l text-f>
		<h3>geo::bearing</h3>
		<p>The <code>geo::bearing</code> function calculates the bearing between two geolocation points.</p>
		<Code @name="docs-surrealql-functions-geo-bearing.surql" text="API Definition">
			geo::bearing(point, point) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-geo-bearing-input.surql">
				RETURN geo::bearing( (51.509865, -0.118092), (-0.118092, 51.509865) );
			</Code>
			<Code @name="docs-surrealql-functions-geo-bearing-result.txt">
				-31.913259585079818
			</Code>
		</codes>
		<p>If either argument is not a geolocation point, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-geo-bearing-error-input.surql">
				RETURN geo::bearing(12345, true);
			</Code>
			<Code @name="docs-surrealql-functions-geo-bearing-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "centroid"}}>

	<Layout::Text text-l text-f>
		<h3>geo::centroid</h3>
		<p>The <code>geo::centroid</code> function calculates the centroid between two geolocation points.</p>
		<Code @name="docs-surrealql-functions-geo-centroid.surql" text="API Definition">
			geo::centroid(geometry) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-geo-centroid-input.surql">
				RETURN geo::centroid({
					type: "Polygon",
					coordinates: [[
						[-0.38314819, 51.37692386], [0.1785278, 51.37692386],
						[0.1785278, 51.61460570], [-0.38314819, 51.61460570],
						[-0.38314819, 51.37692386]
					]]
				});
			</Code>
			<Code @name="docs-surrealql-functions-geo-centroid-result.txt">
				{
					"type": "Point",
					"coordinates": [
						-0.10231019499999999,
						51.49576478
					]
				}
			</Code>
		</codes>
		<p>If either argument is not a geometry type, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-geo-centroid-error-input.surql">
				RETURN geo::centroid(12345);
			</Code>
			<Code @name="docs-surrealql-functions-geo-centroid-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "distance"}}>

	<Layout::Text text-l text-f>
		<h3>geo::distance</h3>
		<p>The <code>geo::distance</code> function calculates the haversine distance, in metres, between two geolocation points.</p>
		<Code @name="docs-surrealql-functions-geo-distance.surql" text="API Definition">
			geo::distance(point, point) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-geo-distance-input.surql">
				RETURN geo::distance( (51.509865, -0.118092), (-0.118092, 51.509865) );
			</Code>
			<Code @name="docs-surrealql-functions-geo-distance-result.txt">
				7491494.807105545
			</Code>
		</codes>
		<p>If either argument is not a geolocation point, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-geo-distance-error-input.surql">
				RETURN geo::distance(12345, true);
			</Code>
			<Code @name="docs-surrealql-functions-geo-distance-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "hash-decode"}}>

	<Layout::Text text-l text-f>
		<h3>geo::hash::decode</h3>
		<p>The <code>geo::hash::decode</code> function converts a geohash into a geolocation point.</p>
		<Code @name="docs-surrealql-functions-geo-hash-decode.surql" text="API Definition">
			geo::hash::decode(point) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-geo-hash-decode-input.surql">
				RETURN geo::hash::decode("mpuxk4s24f51");
			</Code>
			<Code @name="docs-surrealql-functions-geo-hash-decode-result.txt">
				{
					"type": "Point",
					"coordinates": [
						51.50986494496465,
						-0.11809204705059528
					]
				}
			</Code>
		</codes>
		<p>If the argument is not a geolocation point, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-geo-hash-decode-error-input.surql">
				RETURN geo::hash::decode(12345);
			</Code>
			<Code @name="docs-surrealql-functions-geo-hash-decode-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "hash-encode"}}>

	<Layout::Text text-l text-f>
		<h3>geo::hash::encode</h3>
		<p>The <code>geo::hash::encode</code> function converts a geolocation point into a geohash.</p>
		<Code @name="docs-surrealql-functions-geo-hash-encode-1.surql" text="API Definition">
			geo::hash::encode(point) -> string
		</Code>
		<p>The function accepts a second argument, which determines the accuracy and granularity of the geohash.</p>
		<Code @name="docs-surrealql-functions-geo-hash-encode-2.surql" text="API Definition">
			geo::hash::encode(point, number) -> string
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-geo-hash-encode-input-1.surql">
				RETURN geo::hash::encode( (51.509865, -0.118092) );
			</Code>
			<Code @name="docs-surrealql-functions-geo-hash-encode-result-1.txt">
				"mpuxk4s24f51"
			</Code>
		</codes>
		<p>The following example shows this function with two arguments, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-geo-hash-encode-input-2.surql">
				RETURN geo::hash::encode( (51.509865, -0.118092), 5 );
			</Code>
			<Code @name="docs-surrealql-functions-geo-hash-encode-result-2.txt">
				"mpuxk"
			</Code>
		</codes>
		<p>If the first argument is not a geolocation point, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-geo-hash-encode-error-input.surql">
				RETURN geo::hash::encode(12345);
			</Code>
			<Code @name="docs-surrealql-functions-geo-hash-encode-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />