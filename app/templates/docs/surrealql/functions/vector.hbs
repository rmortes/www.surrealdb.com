<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions">Functions</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions.vector">Vector functions</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Vector functions</h2>
	<p>A collection of essential vector operations that provide foundational functionality for numerical computation, machine learning, and data analysis.
        These operations include distance measurements, similarity coefficients, and other basic and complex operations related to vectors.
        Through understanding and implementing these functions, we can perform a wide variety of tasks ranging from data processing to advanced statistical analyses.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
             <tr>
				<td>
					<a href="#add">
						<code>vector::add()</code>
					</a>
				</td>
				<td>Performs element-wise addition of two vectors</td>
			</tr>
            <tr>
				<td>
					<a href="#angle">
						<code>vector::angle()</code>
					</a>
				</td>
				<td>Computes the angle between two vectors</td>
			</tr>
            <tr>
				<td>
					<a href="#cross">
						<code>vector::cross()</code>
					</a>
				</td>
				<td>Computes the cross product of two vectors</td>
			</tr>
             <tr>
				<td>
					<a href="#divide">
						<code>vector::divide()</code>
					</a>
				</td>
				<td>Performs element-wise division between two vectors</td>
			</tr>
            <tr>
				<td>
					<a href="#dot">
						<code>vector::dot()</code>
					</a>
				</td>
				<td>Computes the dot product of two vectors</td>
			</tr>
            <tr>
				<td>
					<a href="#magnitude">
						<code>vector::magnitude()</code>
					</a>
				</td>
				<td>Computes the magnitude (or length) of a vector</td>
			</tr>
             <tr>
				<td>
					<a href="#multiply">
						<code>vector::multiply()</code>
					</a>
				</td>
				<td>Performs element-wise multiplication of two vectors</td>
			</tr>
            <tr>
				<td>
					<a href="#normalize">
						<code>vector::normalize()</code>
					</a>
				</td>
				<td>Computes the normalization of a vector</td>
			</tr>
             <tr>
				<td>
					<a href="#project">
						<code>vector::project()</code>
					</a>
				</td>
				<td>Computes the projection of one vector onto another</td>
			</tr>
             <tr>
				<td>
					<a href="#subtract">
						<code>vector::subtract()</code>
					</a>
				</td>
				<td>Performs element-wise subtraction between two vectors</td>
			</tr>
            <tr>
				<td>
					<a href="#chebyshev">
						<code>vector::distance::chebyshev()</code>
					</a>
				</td>
				<td>Computes the Chebyshev distance</td>
			</tr>
            <!--<tr>
				<td>
					<a href="#mahalanobis">
						<code>vector::distance::mahalanobis()</code>
					</a>
				</td>
				<td>computes the Mahalanobis distance between two vectors, which is a measure of the distance between a point and a distribution, not between two distinct points. It's effectively a multivariate equivalent of the standard Z-score and is used to identify outliers in a dataset by taking into account the correlations of the dataset.</td>
			</tr>-->
			<tr>
				<td>
					<a href="#euclidean">
						<code>vector::distance::euclidean()</code>
					</a>
				</td>
				<td>Computes the Euclidean distance between two vectors</td>
			</tr>
            <tr>
				<td>
					<a href="#hamming">
						<code>vector::distance::hamming()</code>
					</a>
				</td>
				<td>Computes the Hamming distance between two vectors</td>
			</tr>
			<tr>
				<td>
					<a href="#manhattan">
						<code>vector::distance::manhattan()</code>
					</a>
				</td>
				<td>Computes the Manhattan distance between two vectors</td>
			</tr>
			<tr>
				<td>
					<a href="#minkowski">
						<code>vector::distance::minkowski()</code>
					</a>
				</td>
				<td>Computes the Minkowski distance between two vectors</td>
			</tr>
            <tr>
				<td>
					<a href="#cosine">
						<code>vector::similarity::cosine()</code>
					</a>
				</td>
				<td>Computes the Cosine similarity between two vectors</td>
			</tr>
             <tr>
				<td>
					<a href="#jaccard">
						<code>vector::similarity::jaccard()</code>
					</a>
				</td>
				<td>Computes the Jaccard similarity between two vectors</td>
			</tr>
            <tr>
				<td>
					<a href="#pearson">
						<code>vector::similarity::pearson()</code>
					</a>
				</td>
				<td>Computes the Pearson correlation coefficient between two vectors</td>
			</tr>
            <!--<tr>
				<td>
					<a href="#spearman">
						<code>vector::similarity::spearman()</code>
					</a>
				</td>
				<td>Computes the Spearman rank correlation between two vectors, which assesses how well the relationship between the two vectors can be described using a monotonic function.</td>
			</tr>-->
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "add"}}>

	<Layout::Text text-l text-f>
		<h3><code>vector::add</code></h3>
		<p>The <code>vector::add</code> function performs element-wise addition of two vectors, where each element in the first vector is added to the corresponding element in the second vector.</p>
		<Code @name="docs-surrealql-functions-vector-add.surql" text="API Definition">
			vector::add(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-vector-add-input.surql">
				RETURN vector::add([1, 2, 3], [1, 2, 3]);
			</Code>
			<Code @name="docs-surrealql-functions-vector-add-result.txt">
				[2, 4, 6]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "angle"}}>

	<Layout::Text text-l text-f>
		<h3><code>vector::angle</code></h3>
		<p>The <code>vector::angle</code> function computes the angle between two vectors, providing a measure of the orientation difference between them.</p>
		<Code @name="docs-surrealql-functions-vector-angle.surql" text="API Definition">
			vector::angle(array, array) -> number
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-vector-angle-input.surql">
				RETURN vector::angle([5, 10, 15], [10, 5, 20]);
			</Code>
			<Code @name="docs-surrealql-functions-vector-angle-result.txt">
				0.36774908225917935f
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "cross"}}>

	<Layout::Text text-l text-f>
		<h3><code>vector::cross</code></h3>
		<p>The <code>vector::cross</code> function computes the cross product of two vectors, which results in a vector that is orthogonal (perpendicular) to the plane containing the original vectors.</p>
		<Code @name="docs-surrealql-functions-vector-cross.surql" text="API Definition">
			vector::cross(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-vector-cross-input.surql">
				RETURN vector::cross([1, 2, 3], [4, 5, 6]);
			</Code>
			<Code @name="docs-surrealql-functions-vector-cross-result.txt">
				[-3, 6, -3]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "divide"}}>

	<Layout::Text text-l text-f>
		<h3><code>vector::divide</code></h3>
		<p>The <code>vector::divide</code> function performs element-wise division between two vectors, where each element in the first vector is divided by the corresponding element in the second vector.</p>
		<Code @name="docs-surrealql-functions-vector-divide.surql" text="API Definition">
			vector::divide(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-vector-divide-input.surql">
				RETURN vector::divide([10, -20, 30, 0], [0, -1, 2, -3]);
			</Code>
			<Code @name="docs-surrealql-functions-vector-divide-result.txt">
				[NaN, 20, 15, 0]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "dot"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::dot</code></h3>
        <p>The <code>vector::dot</code> function computes the dot product of two vectors, which is the sum of the products of the corresponding entries of the two sequences of numbers.</p>
        <Code @name="docs-surrealql-functions-vector-dot.surql" text="API Definition">
            vector::dot(array, array) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-dot-input.surql">
                RETURN vector::dot([1, 2, 3], [1, 2, 3]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-dot-result.txt">
                14
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "magnitude"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::magnitude</code></h3>
        <p>The <code>vector::magnitude</code> function computes the magnitude (or length) of a vector, providing a measure of the size of the vector in multi-dimensional space.</p>
        <Code @name="docs-surrealql-functions-vector-magnitude.surql" text="API Definition">
            vector::magnitude(array) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-magnitude-input.surql">
                RETURN vector::magnitude([ 1, 2, 3, 3, 3, 4, 5 ]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-magnitude-result.txt">
                8.54400374531753f
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "multiply"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::multiply</code></h3>
        <p>The <code>vector::multiply</code> function performs element-wise multiplication of two vectors, where each element in the first vector is multiplied by the corresponding element in the second vector.</p>
        <Code @name="docs-surrealql-functions-vector-multiply.surql" text="API Definition">
            vector::multiply(array, array) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-multiply-input.surql">
                RETURN vector::multiply([1, 2, 3], [1, 2, 3]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-multiply-result.txt">
                [1, 4, 9]
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "normalize"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::normalize</code></h3>
        <p>The <code>vector::normalize</code> function computes the normalization of a vector, transforming it to a unit vector (a vector of length 1) that maintains the original direction.</p>
        <Code @name="docs-surrealql-functions-vector-normalize.surql" text="API Definition">
            vector::normalize(array) -> array
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-normalize-input.surql">
                RETURN vector::normalize([ 4, 3 ]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-normalize-result.txt">
                [0.8f, 0.6f]
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "project"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::project</code></h3>
        <p>The <code>vector::project</code> function computes the normalization of a vector, transforming it to a unit vector (a vector of length 1) that maintains the original direction.</p>
        <Code @name="docs-surrealql-functions-vector-project.surql" text="API Definition">
            vector::project(array) -> array
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-project-input.surql">
                RETURN vector::project([1, 2, 3], [4, 5, 6]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-project-result.txt">
                [1.6623376623376624f, 2.077922077922078f, 2.4935064935064934f]
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "subtract"}}>

	<Layout::Text text-l text-f>
		<h3><code>vector::subtract</code></h3>
		<p>The <code>vector::subtract</code> function performs element-wise subtraction between two vectors, where each element in the second vector is subtracted from the corresponding element in the first vector.</p>
		<Code @name="docs-surrealql-functions-vector-subtract.surql" text="API Definition">
			vector::subtract(array, array) -> array
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-vector-subtract-input.surql">
				RETURN vector::subtract([4, 5, 6], [3, 2, 1]);
			</Code>
			<Code @name="docs-surrealql-functions-vector-subtract-result.txt">
				[1, 3, 5]
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "chebyshev"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::distance::chebyshev</code></h3>
        <p>The <code>vector::distance::chebyshev</code> function computes the Chebyshev distance (also known as maximum value distance) between two vectors, which is the greatest of their differences along any coordinate dimension.</p>
        <Code @name="docs-surrealql-functions-vector-chebyshev.surql" text="API Definition">
            vector::distance::chebyshev(array, array) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-chebyshev-input.surql">
                RETURN vector::distance::chebyshev([2, 4, 5, 3, 8, 2], [3, 1, 5, -3, 7, 2]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-chebyshev-result.txt">
                6f
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "euclidean"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::distance::euclidean</code></h3>
        <p>The <code>vector::distance::euclidean</code> function computes the Euclidean distance between two vectors, providing a measure of the straight-line distance between two points in a multi-dimensional space.</p>
        <Code @name="docs-surrealql-functions-vector-euclidean.surql" text="API Definition">
            vector::distance::euclidean(array, array) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-euclidean-input.surql">
                RETURN vector::distance::euclidean([10, 50, 200], [400, 100, 20]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-euclidean-result.txt">
                432.43496620879307f
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "hamming"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::distance::hamming</code></h3>
        <p>The <code>vector::distance::hamming</code> function computes the Hamming distance between two vectors, measuring the minimum number of substitutions required to change one vector into the other, useful for comparing strings or codes.</p>
        <Code @name="docs-surrealql-functions-vector-hamming.surql" text="API Definition">
            vector::distance::hamming(array, array) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-hamming-input.surql">
                RETURN vector::distance::hamming([1, 2, 2], [1, 2, 3]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-hamming-result.txt">
                1
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "manhattan"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::distance::manhattan</code></h3>
        <p>The <code>vector::distance::manhattan</code>
        function computes the Manhattan distance (also known as the L1 norm or Taxicab geometry) between two vectors,
        which is the sum of the absolute differences of their corresponding elements.</p>
        <Code @name="docs-surrealql-functions-vector-manhattan.surql" text="API Definition">
            vector::distance::manhattan(array, array) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-manhattan-input.surql">
                RETURN vector::distance::manhattan([10, 20, 15, 10, 5], [12, 24, 18, 8, 7]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-manhattan-result.txt">
                13
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "minkowski"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::distance::minkowski</code></h3>
        <p>The <code>vector::distance::minkowski</code>
        function computes the Minkowski distance between two vectors,
        a generalization of other distance metrics such as Euclidean and Manhattan
        when parameterized with different values of p.</p>
        <Code @name="docs-surrealql-functions-vector-minkowski.surql" text="API Definition">
            vector::distance::minkowski(array, array, number) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-minkowski-input.surql">
                RETURN vector::distance::minkowski([10, 20, 15, 10, 5], [12, 24, 18, 8, 7], 3);
            </Code>
            <Code @name="docs-surrealql-functions-vector-minkowski-result.txt">
                4.862944131094279f
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "cosine"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::similarity::cosine</code></h3>
        <p>The <code>vector::similarity::cosine</code>
        function computes the Cosine similarity between two vectors, indicating the cosine of the angle between them,
        which is a measure of how closely two vectors are oriented to each other.</p>
        <Code @name="docs-surrealql-functions-vector-cosine.surql" text="API Definition">
            vector::similarity::cosine(array, array) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-cosine-input.surql">
                RETURN vector::similarity::cosine([10, 50, 200], [400, 100, 20]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-cosine-result.txt">
                0.15258215962441316f
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "jaccard"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::similarity::jaccard</code></h3>
        <p>The <code>vector::similarity::jaccard</code>
        function computes the Jaccard similarity between two vectors,
        measuring the intersection divided by the union of the datasets represented by the vectors.</p>
        <Code @name="docs-surrealql-functions-vector-jaccard.surql" text="API Definition">
            vector::similarity::jaccard(array, array) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-jaccard-input.surql">
                RETURN vector::similarity::jaccard([0,1,2,5,6], [0,2,3,4,5,7,9]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-jaccard-result.txt">
                0.3333333333333333f
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "pearson"}}>

    <Layout::Text text-l text-f>
        <h3><code>vector::similarity::pearson</code></h3>
        <p>The <code>vector::similarity::pearson</code>
        function Computes the Pearson correlation coefficient between two vectors,
        reflecting the degree of linear relationship between them.</p>
        <Code @name="docs-surrealql-functions-vector-pearson.surql" text="API Definition">
            vector::similarity::pearson(array, array) -> number
        </Code>
        <p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
        <codes vertical>
            <Code @name="docs-surrealql-functions-vector-pearson-input.surql">
                RETURN vector::similarity::pearson([1,2,3], [1,5,7]);
            </Code>
            <Code @name="docs-surrealql-functions-vector-pearson-result.txt">
                0.9819805060619659f
            </Code>
        </codes>
    </Layout::Text>

</Layout::Group>

<Layout::Gap large />
