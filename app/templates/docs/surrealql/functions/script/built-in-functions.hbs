<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions">Functions</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions.script">Scripting functions</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions.script.built-in-functions">Built-in functions</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
	<h3>Built-in functions</h3>
	<p>Besides basic JavaScript utilities and <Link @link="docs.surrealql.functions.script.type-conversion">classes for SurrealQL types</Link>, there are a handful of utilities built into the embedded scripting functions.</p>
</Layout::Text>

<Layout::Gap tiny />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#fetch">
						<Ascua::Prism::Inline @language="ts" @code="async fetch(resource, options)" />
					</a>
				</td>
				<td>Full fledged fetch implementation closely matching the <Link @link="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">official specification</Link>.</td>
			</tr>
			<tr>
				<td>
					<a href="#query">
						<Ascua::Prism::Inline @language="ts" @code="async query(surql)" />
					</a>
				</td>
				<td>Run SurrealQL subqueries from within the embedded scripting functions.</td>
			</tr>
			<tr>
				<td>
					<a href="#value">
						<Ascua::Prism::Inline @language="ts" @code="async value(variable)" />
					</a>
				</td>
				<td>Retrieve values for SurrealQL variables from within the embedded scripting functions.</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "fetch"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async fetch(resource, options)" /></h3>
		<p>Full fledged fetch implementation closely matching the <Link @link="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">official specification</Link>.</p>
		<blockquote yellow text="Note">
			For complete documentation, please refer to the <Link @link="https://developer.mozilla.org/en-US/docs/Web/API/fetch">MDN documentation</Link>.
		</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>resource</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Accepts either a url in a string, or a <Link @link="https://developer.mozilla.org/en-US/docs/Web/API/URL"><code>URL</code></Link> or <Link @link="https://developer.mozilla.org/en-us/docs/web/api/request"><code>Request</code></Link> object.
						</td>
					</tr>
					<tr>
						<td>
							<code>options</code>
						</td>
						<td>
							Accepts various options related to the request. Refer to <Link @link="https://developer.mozilla.org/en-US/docs/Web/API/fetch#syntax">MDN docs</Link> for a full reference.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-surrealql-functions-script-built-in-functions-fetch.surql">
			RETURN function() {
				// List all posts
				const posts = fetch('https://jsonplaceholder.typicode.com/posts');

				// Update post with ID 1
				const updated = fetch('https://jsonplaceholder.typicode.com/posts/1', {
					method: 'PUT',
					body: JSON.stringify({
						id: 1,
						title: 'foo',
						body: 'bar',
						userId: 1,
					}),
					headers: {
						'Content-type': 'application/json; charset=UTF-8',
					},
				});

				return { posts, updated };
			}
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "query"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async query(surql)" /></h3>
		<p>Run SurrealQL subqueries from within the embedded scripting functions.</p>
		<blockquote yellow text="Note">
			Only subqueries can be executed with the <code>query()</code> function. This means that only a single query can currently be executed, and that only CRUD operations are allowed.
		</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>surql</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Accepts a single SurrealQL query, which is limited to a CRUD operation.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-surrealql-functions-script-built-in-functions-query.surql">
			CREATE user:john, user:mary;

			RETURN function() {
				// Select all users
				const users = await surrealdb.query("SELECT * FROM user");

				// Prepared query
				const query = new surrealdb.Query("SELECT * FROM $id", {
					id: new Record('user', 'mary')
				});

				// Execute prepared query
				const mary = (await surrealdb.query(query))[0];

				// Assign variables later to prepared query
				query.bind('id', new Record('user', 'john'));

				// Execute prepared query
				const john = (await surrealdb.query(query))[0];

				return { john, mary };
			}
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "value"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async value(variable)" /></h3>
		<p>Retrieve values for SurrealQL variables from within the embedded scripting functions.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>variable</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Accepts the path to a variable
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-surrealql-functions-script-built-in-functions-value.surql">
			LET $something = 123;
			LET $obj = {
				nested: 456
			};

			LET $arr = [
				{ value: 1 },
				{ value: 2 },
				{ value: 3 },
				{ value: 4 },
				{ value: 5 },
				{ value: 6 },
			];

			RETURN function() {
				// Get the value for a variable
				const something = await surrealdb.value("$something");

				// Get the value for a nested property
				const nested = await surrealdb.value("$obj.nested");

				// Filter properties from an array
				const fromArray = await surrealdb.value("$arr[WHERE value > 3].value");

				return { something, nested, fromArray };
			}
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />
