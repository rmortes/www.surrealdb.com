<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions">Functions</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions.http">HTTP functions</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>HTTP functions</h2>
	<p>These functions can be used when opening and submitting remote web requests, and webhooks.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#head">
						<code>http::head()</code>
					</a>
				</td>
				<td>Perform a remote HTTP HEAD request</td>
			</tr>
			<tr>
				<td>
					<a href="#get">
						<code>http::get()</code>
					</a>
				</td>
				<td>Perform a remote HTTP GET request</td>
			</tr>
			<tr>
				<td>
					<a href="#put">
						<code>http::put()</code>
					</a>
				</td>
				<td>Perform a remote HTTP PUT request</td>
			</tr>
			<tr>
				<td>
					<a href="#post">
						<code>http::post()</code>
					</a>
				</td>
				<td>Perform a remote HTTP POST request</td>
			</tr>
			<tr>
				<td>
					<a href="#patch">
						<code>http::patch()</code>
					</a>
				</td>
				<td>Perform a remote HTTP PATCH request</td>
			</tr>
			<tr>
				<td>
					<a href="#delete">
						<code>http::delete()</code>
					</a>
				</td>
				<td>Perform a remote HTTP DELETE request</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "head"}}>

	<Layout::Text text-l text-f>
		<h3><code>http::head</code></h3>
		<p>The <code>http::head</code> function performs a remote HTTP <code>HEAD</code> request. The first parameter is the URL of the remote endpoint. If the response does not return a <code>2XX</code> status code, then the function will fail and return the error.</p>
		<Code @name="docs-surrealql-functions-http-head-1.surql" text="API Definition">
			http::head(string) -> null
		</Code>
		<p>If an object is given as the second argument, then this can be used to set the request headers.</p>
		<Code @name="docs-surrealql-functions-http-head-2.surql" text="API Definition">
			http::head(string, object) -> null
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-http-head-input-1.surql">
				RETURN http::head('https://surrealdb.com');
			</Code>
			<Code @name="docs-surrealql-functions-http-head-result-1.txt">
				null
			</Code>
		</codes>
		<p>To specify custom headers with the HTTP request, pass an object as the second argument:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-http-head-input-2.surql">
				RETURN http::head('https://surrealdb.com', {
					'x-my-header': 'some unique string'
				});
			</Code>
			<Code @name="docs-surrealql-functions-http-head-result-2.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "get"}}>

	<Layout::Text text-l text-f>
		<h3><code>http::get</code></h3>
		<p>The <code>http::get</code> function performs a remote HTTP <code>GET</code> request. The first parameter is the URL of the remote endpoint. If the response does not return a <code>2XX</code> status code, then the function will fail and return the error. If the remote endpoint returns an <code>application/json</code> content-type, then the response is parsed and returned as a value, otherwise the response is treated as text.</p>
		<Code @name="docs-surrealql-functions-http-get-1.surql" text="API Definition">
			http::get(string) -> value
		</Code>
		<p>If an object is given as the second argument, then this can be used to set the request headers.</p>
		<Code @name="docs-surrealql-functions-http-get-2.surql" text="API Definition">
			http::get(string, object) -> value
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-http-get-input-1.surql">
				RETURN http::get('https://surrealdb.com');
			</Code>
			<Code @name="docs-surrealql-functions-http-get-result-1.txt">
				-- The HTML code is returned
			</Code>
		</codes>
		<p>To specify custom headers with the HTTP request, pass an object as the second argument:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-http-get-input-2.surql">
				RETURN http::get('https://surrealdb.com', {
					'x-my-header': 'some unique string'
				});
			</Code>
			<Code @name="docs-surrealql-functions-http-get-result-2.txt">
				-- The HTML code is returned
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "put"}}>

	<Layout::Text text-l text-f>
		<h3><code>http::put</code></h3>
		<p>The <code>http::put</code> function performs a remote HTTP <code>PUT</code> request. The first parameter is the URL of the remote endpoint, and the second parameter is the value to use as the request body, which will be converted to JSON. If the response does not return a <code>2XX</code> status code, then the function will fail and return the error. If the remote endpoint returns an <code>application/json</code> content-type, then the response is parsed and returned as a value, otherwise the response is treated as text.</p>
		<Code @name="docs-surrealql-functions-http-put-1.surql" text="API Definition">
			http::put(string, object) -> value
		</Code>
		<p>If an object is given as the third argument, then this can be used to set the request headers.</p>
		<Code @name="docs-surrealql-functions-http-put-2.surql" text="API Definition">
			http::put(string, object, object) -> value
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-http-put-input-1.surql">
				RETURN http::put('https://dummyjson.com/comments', {
				  "id": 1,
				  "body": "This is some awesome thinking!",
				  "postId": 100,
				  "user": {
				    "id": 63,
				    "username": "eburras1q"
				  }
				});
			</Code>
			<Code @name="docs-surrealql-functions-http-put-result-1.txt">
				{
				  "id": 1,
				  "body": "This is some awesome thinking!",
				  "postId": 100,
				  "user": {
				    "id": 63,
				    "username": "eburras1q"
				  }
				}
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "post"}}>

	<Layout::Text text-l text-f>
		<h3><code>http::post</code></h3>
		<p>The <code>http::post</code> function performs a remote HTTP <code>POST</code> request. The first parameter is the URL of the remote endpoint, and the second parameter is the value to use as the request body, which will be converted to JSON. If the response does not return a <code>2XX</code> status code, then the function will fail and return the error. If the remote endpoint returns an <code>application/json</code> content-type, then the response is parsed and returned as a value, otherwise the response is treated as text.</p>
		<Code @name="docs-surrealql-functions-http-post-1.surql" text="API Definition">
			http::post(string, object) -> value
		</Code>
		<p>If an object is given as the third argument, then this can be used to set the request headers.</p>
		<Code @name="docs-surrealql-functions-http-post-2.surql" text="API Definition">
			http::post(string, object, object) -> value
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-http-post-input-1.surql">
				RETURN http::post('https://dummyjson.com/comments/1', {
				  "id": 1,
				  "body": "This is some awesome thinking!",
				  "postId": 100,
				  "user": {
				    "id": 63,
				    "username": "eburras1q"
				  }
				});
			</Code>
			<Code @name="docs-surrealql-functions-http-post-result-1.txt">
				{
				  "id": 1,
				  "body": "This is some awesome thinking!",
				  "postId": 100,
				  "user": {
				    "id": 63,
				    "username": "eburras1q"
				  }
				}
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "patch"}}>

	<Layout::Text text-l text-f>
		<h3><code>http::patch</code></h3>
		<p>The <code>http::patch</code> function performs a remote HTTP <code>PATCH</code> request. The first parameter is the URL of the remote endpoint, and the second parameter is the value to use as the request body, which will be converted to JSON. If the response does not return a <code>2XX</code> status code, then the function will fail and return the error. If the remote endpoint returns an <code>application/json</code> content-type, then the response is parsed and returned as a value, otherwise the response is treated as text.</p>
		<Code @name="docs-surrealql-functions-http-patch-1.surql" text="API Definition">
			http::patch(string, object) -> value
		</Code>
		<p>If an object is given as the third argument, then this can be used to set the request headers.</p>
		<Code @name="docs-surrealql-functions-http-patch-2.surql" text="API Definition">
			http::patch(string, object, object) -> value
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-http-patch-input-1.surql">
				RETURN http::patch('https://dummyjson.com/comments/1', {
				  "id": 1,
				  "body": "This is some awesome thinking!",
				  "postId": 100,
				  "user": {
				    "id": 63,
				    "username": "eburras1q"
				  }
				});
			</Code>
			<Code @name="docs-surrealql-functions-http-patch-result-1.txt">
				{
				  "id": 1,
				  "body": "This is some awesome thinking!",
				  "postId": 100,
				  "user": {
				    "id": 63,
				    "username": "eburras1q"
				  }
				}
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "delete"}}>

	<Layout::Text text-l text-f>
		<h3><code>http::delete</code></h3>
		<p>The <code>http::delete</code> function performs a remote HTTP <code>DELETE</code> request. The first parameter is the URL of the remote endpoint. If the response does not return a <code>2XX</code> status code, then the function will fail and return the error. If the remote endpoint returns an <code>application/json</code> content-type, then the response is parsed and returned as a value, otherwise the response is treated as text.</p>
		<Code @name="docs-surrealql-functions-http-delete-1.surql" text="API Definition">
			http::delete(string) -> value
		</Code>
		<p>If an object is given as the second argument, then this can be used to set the request headers.</p>
		<Code @name="docs-surrealql-functions-http-delete-2.surql" text="API Definition">
			http::delete(string, object) -> value
		</Code>
		<p>The following example shows this function, and its output, when used in a <Link @link="docs.surrealql.statements.return"><code>RETURN</code></Link> statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-http-delete-input-1.surql">
				RETURN http::delete('https://dummyjson.com/comments/1');
			</Code>
			<Code @name="docs-surrealql-functions-http-delete-result-1.txt">
				null
			</Code>
		</codes>
		<p>To specify custom headers with the HTTP request, pass an object as the second argument:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-http-delete-input-2.surql">
				RETURN http::delete('https://dummyjson.com/comments/1', {
					'x-my-header': 'some unique string'
				});
			</Code>
			<Code @name="docs-surrealql-functions-http-delete-result-2.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />