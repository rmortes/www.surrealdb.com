<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.statements">Statements</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.statements.select"><code>SELECT</code> statement</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2><code>SELECT</code> statement</h2>
	<p>The SELECT statement can be used for selecting and querying data in a database. Each SELECT statement supports selecting from multiple targets, which can include tables, records, edges, subqueries, paramaters, arrays, objects, and other values.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Statement syntax</h3>
	<Code @name="docs/surrealql/statements/select/syntax.typescript" text="Surql Syntax" />
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>

	<h3>Example usage</h3>

	<h4>Basic usage</h4>
	<p>By default, SurrealDB returns an array of JSON-like objects called records instead of a tabular structure of rows and columns.</p>
	<Code @name="docs/surrealql/statements/select/simple.surql" />

	<p>
		SurrealDB can also return specific fields as an array of values instead of the default array of objects.
		This only works if you select a single un-nested field from a table or a record.
	</p>
	<Code @name="docs/surrealql/statements/select/value.surql" />

	<h4>Advanced expressions</h4>
	<p>SELECT queries support advanced expression in the field projections.</p>
	<Code @name="docs/surrealql/statements/select/expr.surql" />

	<h4>Select multiple targets using the <code>FROM</code> clause</h4>
	<p>SurrealDB supports selecting from multiple targets, including tables, records, edges, parameters, subqueries, arrays, objects, values.</p>
	<Code @name="docs/surrealql/statements/select/from.surql" />

	<h4>Filter queries using the <code>WHERE</code> clause</h4>
	<p>As with traditional SQL queries, the SurrealDB SELECT queries support conditional filtering using a <code>WHERE</code> clause. If the expression in the <code>WHERE</code> clause evaluates to true, then the respective record will be returned.</p>
	<Code @name="docs/surrealql/statements/select/where.surql" />

	<h4>The <code>SPLIT</code> clause</h4>
	<p>As SurrealDB supports arrays and nested fields within arrays, it is possible to split the result on a specific field name, returning each value in an array as a separate value, along with the record content itself. This is useful in data analysis contexts.</p>
	<Code @name="docs/surrealql/statements/select/split.surql" />

	<h4>The <code>GROUP BY</code> and <code>GROUP ALL</code> clause</h4>
	<p>SurrealDB supports data aggregation and grouping, with support for multiple fields, nested fields, and aggregate functions. In SurrealDB, every field which appears in the field projections of the select statement (and which is not an aggregate function), must also be present in the <code>GROUP BY</code> clause.</p>
	<Code @name="docs/surrealql/statements/select/group.surql" />

	<h4>Sort records using the <code>ORDER BY</code> clause</h4>
	<p>To sort records, SurrealDB allows ordering on multiple fields and nested fields. Use the <code>ORDER BY</code> clause to specify a comma-separated list of field names that should be used to order the resulting records. The <code>ASC</code> and <code>DESC</code> keywords can be used to specify whether results should be sorted in an ascending or descending manner. The <code>COLLATE</code> keyword can be used to use unicode collation when ordering text in string values, ensuring that different cases, and different languages are sorted in a consistent manner. Finally, the <code>NUMERIC</code> can be used to correctly sort text which contains numeric values.</p>
	<Code @name="docs/surrealql/statements/select/order.surql" />

	<h4>The <code>LIMIT</code> clause</h4>
	<p>To limit the number of records returned, use the <code>LIMIT</code> clause.</p>
	<Code @name="docs/surrealql/statements/select/limit.surql" />

	<p>When using the <code>LIMIT</code> clause, it is possible to paginate results by using the <code>START</code> clause to start from a specific record from the result set.</p>
	<Code @name="docs/surrealql/statements/select/start.surql" />

	<h4>Connect targets using the <code>FETCH</code> clause</h4>
	<p>One of the most powerful functions in SurrealDB are the <Link @link="docs.surrealql.datamodel.records">record links</Link> and <Link @link="docs.surrealql.statements.relate">graph connections.</Link></p> 
	<p> Instead of pulling data from multiple tables and merging that data together, SurrealDB allows you to traverse related records efficiently without needing to use JOINs. </p>
	<p>To fetch and replace records with the remote record data, use the <code>FETCH</code> clause to specify the fields and nested fields which should be fetched in-place, and returned in the final statement response output.</p>
	<Code @name="docs/surrealql/statements/select/fetch.surql" />

	<h4>The <code>TIMEOUT</code> clause</h4>
	<p>When processing a large result set with many interconnected records, it is possible to use the <code>TIMEOUT</code> keyword to specify a timeout duration for the statement. If the statement continues beyond this duration, then the transaction will fail, and the statement will return an error.</p>
	<Code @name="docs/surrealql/statements/select/timeout.surql" />

	<h4>The <code>PARALLEL</code> clause</h4>
	<p>When processing a large result set with many interconnected records, it is possible to specify the <code>PARALLEL</code> keyword to signify that edges and remote records should be fetched and processed in parallel.</p>
	<Code @name="docs/surrealql/statements/select/parallel.surql" />

	<h4>The <code>EXPLAIN</code> clause</h4>
	<p>When <code>EXPLAIN</code> is used, the <code>SELECT</code> statement returns an explanation, essentially revealing the execution plan to provide transparency and understanding of the query performance.</p>
	<Code @name="docs/surrealql/statements/select/explain.surql" />
	<p>Here is the result when the field 'email' is not indexed. We can see that the execution plan will iterate over the whole table.</p>
	<Code @name="docs-surrealql-functions-select-explain-result.js">
		[
				{
						detail: {
								table: 'person'
						},
						operation: 'Iterate Table'
				}
		]
	</Code>
	<Code @name="docs/surrealql/statements/select/explain-full.surql" />
	<p>Here is the result when the 'email' field is indexed. We can see that the execution plan will proceed by utilizing the index.</p>
	<Code @name="docs-surrealql-functions-select-explain-full-result.js">
		[
				{
						detail: {
								plan: {
										index: 'email',
										operator: '=',
										value: 'tobie@surrealdb.com'
								},
								table: 'person'
						},
						operation: 'Iterate Index'
				},
				{
						detail: {
								count: 1
						},
						operation: 'Fetch'
				}
		]
	</Code>
</Layout::Text>

<Layout::Gap large />